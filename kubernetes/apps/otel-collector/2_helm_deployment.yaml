# https://artifacthub.io/packages/helm/opentelemetry-helm/opentelemetry-collector
# https://opentelemetry.io/docs/platforms/kubernetes/getting-started/#deployment-collector
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: otel-collector-deployment
  namespace: argocd
spec:
  project: default
  destination:
    server: "https://kubernetes.default.svc"
    namespace: otel-collector
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    syncOptions:
    - Validate=true
    - CreateNamespace=true
    - PrunePropagationPolicy=foreground
    - PruneLast=true
  source:
    chart: opentelemetry-collector
    repoURL: https://open-telemetry.github.io/opentelemetry-helm-charts
    targetRevision: 0.129.0
    helm:
      fullnameOverride: otel-collector-deployment
      namespaceOverride: otel-collector

      mode: deployment
      
      image:
        repository: docker.io/library/otel/opentelemetry-collector-k8s

      # Do not scale, otherwise there will be duplicated data
      replicaCount: 1

      nodeSelector:
        node-role.kubernetes.io/homelab: homelab

      service:
        enabled: true
        type: ClusterIP
      
      presets:
        # k8scluster receiver
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8sclusterreceiver
        clusterMetrics:
          enabled: true
        # k8sobjects receiver
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8sobjectsreceiver
        kubernetesEvents:
          enabled: true

      config:
        receivers:
          jaeger: null
          zipkin: null
          prometheus:
            config:
              scrape_configs:
                - job_name: otel-collector-deployment
                  scrape_interval: 10s
                  static_configs:
                    - targets:
                        - ${env:MY_POD_IP}:8888
          otlp:
            protocols:
              grpc:
                endpoint: ${env:MY_POD_IP}:4317
              http:
                endpoint: ${env:MY_POD_IP}:4318

        processors:
          batch: {}
          memory_limiter:
            check_interval: 5s
            limit_percentage: 80
            spike_limit_percentage: 25

        exporters:
          debug: null
          otlphttp:
            endpoint: 'TODO: clickhouse svc'
            headers:
              authorization: 'TODO: clickhouse api key'
            compression: gzip

        extensions:
          health_check:
            endpoint: ${env:MY_POD_IP}:13133

        service:
          telemetry:
            metrics:
              readers:
                - pull:
                    exporter:
                      prometheus:
                        host: ${env:MY_POD_IP}
                        port: 8888
          extensions:
            - health_check
          pipelines:
            logs:
              receivers:
                - otlp
              processors:
                - memory_limiter
                - batch
              exporters:
                - otlphttp
            metrics:
              receivers:
                - otlp
                - prometheus
              processors:
                - memory_limiter
                - batch
              exporters:
                - otlphttp
            traces:
              receivers:
                - otlp
              processors:
                - memory_limiter
                - batch
              exporters:
                - otlphttp